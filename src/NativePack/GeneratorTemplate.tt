<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="NativePack.Model" #>
// <auto-generated>
//     This code was generated by NativePack.
//     More info: https://github.com/adospace/nativepack
//     Version:<#= typeof(Program).Assembly.GetName().Version #>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Runtime.Serialization;
using NativePack.Attributes;

<# foreach (var classDefinition in ClassDefinitions) { #>
<#= classDefinition.HasNamespace ? $"namespace {classDefinition.Namespace}" : "" #>
<#= classDefinition.HasNamespace ? "{" : "" #>

    <#= classDefinition.Modifier #> class <#= classDefinition.Name #> 
    {
        partial void OnBeginDeserialize();
        partial void OnEndDeserialize();
        partial void OnBeginSerialize();
        partial void OnEndSerialize();

        public void Deserialize(BinaryReader reader)
        {
            if (reader == null)
            {
                throw new ArgumentNullException(nameof(reader));
            }

            OnBeginDeserialize();

            <# foreach (var property in classDefinition.Properties) { #>
<#= property.GenerateDeserializerCode() #>
            <# } #>

            OnEndDeserialize();
        }

        public void Serialize(BinaryWriter writer)
        {
            if (writer == null)
            {
                throw new ArgumentNullException(nameof(writer));
            }

            OnBeginSerialize();

            <# foreach (var property in classDefinition.Properties) { #>
<#= property.GenerateSerializerCode() #>
            <# } #>

            OnEndSerialize();
        }

        public static void Serialize(<#= classDefinition.Name #> entity, Stream stream)
        {
            if (stream == null)
            {
                throw new ArgumentNullException(nameof(stream));
            }

            using (var binaryWriter = new BinaryWriter(stream, Encoding.Default, true))
                entity.Serialize(binaryWriter);
        }

        public static <#= classDefinition.Name #> Deserialize(Stream stream)
        {
            if (stream == null)
            {
                throw new ArgumentNullException(nameof(stream));
            }

            var newEntity = new <#= classDefinition.Name #>();
            using (var binaryReader = new BinaryReader(stream, Encoding.Default))
                newEntity.Deserialize(binaryReader);
            return newEntity;
        }
    
    }

<#= classDefinition.HasNamespace ? "}" : "" #>
<# } #>